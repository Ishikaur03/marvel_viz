{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Chart.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Charts from \"./Charts.svelte\";\n</script>\n\n<main>\n  <Charts />\n</main>\n\n<style>\n  main {\n    font-family: sans-serif;\n    text-align: center;\n    padding: 1em 2em;\n  }\n</style>",
    "<script>\r\n  import * as d3 from \"d3\";\r\n  import { findClosestPoint } from \"./utilis\";\r\n\r\n  export let allPeople = [];\r\n  export let people = [];\r\n  export let metric1 = \"\";\r\n  export let metric2 = \"\";\r\n  let wrapper;\r\n\r\n  $: xAccessor = d => d.powerstats[metric1];\r\n  $: yAccessor = d => d.powerstats[metric2];\r\n\r\n  const colors = {\r\n    good: \"#5fa7b5\",\r\n    bad: \"#760765\"\r\n  };\r\n  const colorAccessor = d => colors[d.biography.alignment];\r\n\r\n  let height = 400;\r\n  $: width = height;\r\n\r\n  let r = 16;\r\n\r\n  $: xScale = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(allPeople, xAccessor))\r\n    .range([0, width]);\r\n\r\n  $: yScale = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(allPeople, yAccessor))\r\n    .range([height, 0]);\r\n\r\n  let peoplePositions = [];\r\n  let simulation = d3.forceSimulation();\r\n  const updatePositions = () => {\r\n    peoplePositions = people.map(d => ({\r\n      ...d,\r\n      x: xScale(xAccessor(d)),\r\n      targetX: xScale(xAccessor(d)),\r\n      y: yScale(yAccessor(d)),\r\n      targetY: yScale(yAccessor(d)),\r\n      color: colorAccessor(d)\r\n    }));\r\n    simulation\r\n      .nodes(peoplePositions)\r\n      .force(\"x\", d3.forceX(d => d.targetX).strength(1))\r\n      .force(\"y\", d3.forceY(d => d.targetY).strength(1))\r\n      .force(\r\n        \"collide\",\r\n        d3\r\n          .forceCollide(d => 3)\r\n          .iterations(3)\r\n          .strength(0.1)\r\n      )\r\n      .on(\"tick\", d => {\r\n        peoplePositions = peoplePositions;\r\n      });\r\n\r\n    simulation.alpha(0.8);\r\n    simulation.restart();\r\n  };\r\n  $: metric1, metric2, width, people, updatePositions();\r\n\r\n  let hoveredPointName = null;\r\n  $: hoveredPoint = people.find(d => d.name === hoveredPointName) || {};\r\n  $: console.log(hoveredPoint);\r\n</script>\r\n\r\n<div\r\n  class=\"wrapper\"\r\n  bind:this={wrapper}\r\n  bind:clientHeight={height}\r\n  style=\"width: {width}px\"\r\n  on:mousemove={e => {\r\n    if (!wrapper) return\r\n    const bounds = wrapper.getBoundingClientRect()\r\n    const closest = findClosestPoint(\r\n      peoplePositions,\r\n      [e.clientX - bounds.left, e.clientY - bounds.top]\r\n    )\r\n    hoveredPointName = closest && closest.name\r\n  }}\r\n  on:mouseleave={e => hoveredPointName = null}>\r\n  {#each peoplePositions as person}\r\n    <div\r\n      class=\"image\"\r\n      style={`\r\n        background-image: url(${person.images?.sm});\r\n        border-color:black;\r\n        z-index: ${hoveredPointName === person.name ? 10 : 1};\r\n        height: ${r*2}px;\r\n        width: ${r*2}px;\r\n        transform: translate(calc(-50% + ${person.x}px), calc(-50% + ${person.y}px)) scale(${hoveredPointName === person.name ? 1.5 : 1});\r\n      `}\r\n    />\r\n  {/each}\r\n\r\n  {#if hoveredPointName && hoveredPoint}\r\n    <div class=\"tooltip\">\r\n      {hoveredPointName}\r\n      <img src={hoveredPoint.images?.sm} alt={hoveredPointName} />\r\n    </div>\r\n  {/if}\r\n\r\n  <div class=\"vertical-line\">Higher {metric2}</div>\r\n  <div class=\"horizontal-line\">Higher {metric1}</div>\r\n</div>\r\n\r\n<style>\r\n  .wrapper {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 80vh;\r\n    margin: 1em auto;\r\n  }\r\n  .image {\r\n    position: absolute;\r\n    background-size: cover;\r\n    border-radius: 100%;\r\n    border: 3px solid transparent;\r\n    overflow: hidden;\r\n    transition: transform 0.3s ease-out;\r\n  }\r\n  .tooltip {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    font-size: 0.8em;\r\n    transform: translateY(-50%);\r\n    pointer-events: none;\r\n  }\r\n  .tooltip img {\r\n    display: block;\r\n    width: 4em;\r\n  }\r\n  .vertical-line {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 0;\r\n    border-right: 1px solid black;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    text-align: left;\r\n    font-size: 0.7em;\r\n    opacity: 0.6;\r\n    font-style: bold;\r\n    font-weight: 300;\r\n  }\r\n  .horizontal-line {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 0;\r\n    right: 0;\r\n    border-bottom: 1px solid black;\r\n    height: 0;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    text-align: left;\r\n    font-size: 0.7em;\r\n    opacity: 0.6;\r\n    font-style: bold;\r\n    font-weight: 300;\r\n  }\r\n</style>\r\n\r\n\r\n\r\n"
  ],
  "names": [],
  "mappings": "AASE,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,UAAU,CACvB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CAAC,GAAG,AAClB,CAAC;ACkGD,QAAQ,8BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,GAAG,CAAC,IAAI,AAClB,CAAC,AACD,MAAM,8BAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,eAAe,CAAE,KAAK,CACtB,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAC7B,QAAQ,CAAE,MAAM,CAChB,UAAU,CAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,AACrC,CAAC,AACD,QAAQ,8BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,uBAAQ,CAAC,GAAG,eAAC,CAAC,AACZ,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,cAAc,8BAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,CAAC,CACR,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAC7B,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,UAAU,CACvB,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,KAAK,CAChB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,gBAAgB,8BAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAC9B,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,QAAQ,CACzB,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,KAAK,CAChB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,GAAG,AAClB,CAAC"
}